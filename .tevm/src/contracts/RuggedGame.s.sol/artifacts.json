{
  "solcInput": {
    "language": "Solidity",
    "sources": {
      "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IRandomSource {\n    function randomBytes() external view returns (bytes32);\n}\n\ncontract RuggedGame {\n    struct Game {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 prizePool;\n        mapping(address => bool) registered;\n        mapping(address => bytes32) commitments;\n        mapping(address => uint256[5]) revealedLineups;\n        bytes32 disasterRandomness;\n        bool disasterTriggered;\n        address claimant;\n    }\n\n    mapping(uint256 => Game) public games;\n    uint256 public currentGameId;\n    uint256 public constant REGISTRATION_FEE = 0.02 ether;\n    uint256 public constant BLOCKS_PER_PHASE = 100; // Adjust as needed\n    IRandomSource public randomSource;\n\n    event Registered(address indexed player, uint256 indexed gameId);\n    event LineupCommitted(address indexed player, uint256 indexed gameId);\n    event LineupRevealed(address indexed player, uint256 indexed gameId);\n    event DisasterTriggered(uint256 indexed gameId, bytes32 randomness);\n    event WinningsClaimed(address indexed winner, uint256 indexed gameId, uint256 amount);\n\n    constructor(address _randomSource) {\n        randomSource = IRandomSource(_randomSource);\n        currentGameId = 1;\n        games[currentGameId].startBlock = block.number;\n        games[currentGameId].endBlock = block.number + BLOCKS_PER_PHASE * 5; // 5 phases\n    }\n\n    function register(uint256 gameId) external payable {\n        require(msg.value == REGISTRATION_FEE, \"Incorrect registration fee\");\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"REGISTRATION_OPEN\"), \"Registration is not open\");\n        require(!games[gameId].registered[msg.sender], \"Already registered\");\n\n        games[gameId].registered[msg.sender] = true;\n        games[gameId].prizePool += msg.value;\n\n        emit Registered(msg.sender, gameId);\n    }\n\n    function nextGame() external view returns (uint256) {\n        return currentGameId;\n    }\n\n    function status(uint256 gameId) public view returns (string memory) {\n        Game storage game = games[gameId];\n        uint256 phase = (block.number - game.startBlock) / BLOCKS_PER_PHASE;\n\n        if (phase == 0) return \"REGISTRATION_OPEN\";\n        if (phase == 1) return \"COMMIT_LINEUP\";\n        if (phase == 2) return \"REVEAL_LINEUP\";\n        if (phase == 3) return \"TRIGGER_DISASTER\";\n        if (phase == 4) return \"CLAIM_WINNINGS\";\n        return \"GAME_OVER\";\n    }\n\n    function commitLineup(uint256 gameId, bytes32 commitment) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"COMMIT_LINEUP\"), \"Not in commit phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n\n        games[gameId].commitments[msg.sender] = commitment;\n        emit LineupCommitted(msg.sender, gameId);\n    }\n\n    function revealLineup(uint256 gameId, uint256[5] memory lineup, bytes32 salt) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"REVEAL_LINEUP\"), \"Not in reveal phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n        require(keccak256(abi.encodePacked(lineup, salt)) == games[gameId].commitments[msg.sender], \"Invalid reveal\");\n\n        games[gameId].revealedLineups[msg.sender] = lineup;\n        emit LineupRevealed(msg.sender, gameId);\n    }\n\n    function triggerDisaster(uint256 gameId) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"TRIGGER_DISASTER\"), \"Not in trigger disaster phase\");\n        require(!games[gameId].disasterTriggered, \"Disaster already triggered\");\n\n        bytes32 randomness = randomSource.randomBytes();\n        games[gameId].disasterRandomness = randomness;\n        games[gameId].disasterTriggered = true;\n\n        emit DisasterTriggered(gameId, randomness);\n    }\n\n    function isRugged(uint256 gameId, address player) public view returns (bool) {\n        Game storage game = games[gameId];\n        require(game.disasterTriggered, \"Disaster not yet triggered\");\n\n        // Check for invalid lineup (simplified, add more checks as needed)\n        if (game.revealedLineups[player][0] == 0) return true;\n\n        // Simplified disaster check (implement your logic here)\n        uint256 protectionScore = calculateProtectionScore(game.revealedLineups[player]);\n        uint256 disasterSeverity = uint256(game.disasterRandomness) % 100;\n\n        return disasterSeverity > protectionScore;\n    }\n\n    function claimWinnings(uint256 gameId) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"CLAIM_WINNINGS\"), \"Not in claim winnings phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n        require(!isRugged(gameId, msg.sender), \"Player is rugged\");\n\n        games[gameId].claimant = msg.sender;\n\n        // If this is the last player, transfer winnings\n        if (isLastPlayer(gameId)) {\n            uint256 winnings = games[gameId].prizePool;\n            games[gameId].prizePool = 0;\n            payable(msg.sender).transfer(winnings);\n            emit WinningsClaimed(msg.sender, gameId, winnings);\n            \n            // Start next game\n            currentGameId++;\n            games[currentGameId].startBlock = block.number;\n            games[currentGameId].endBlock = block.number + BLOCKS_PER_PHASE * 5;\n        }\n    }\n\n    // Helper functions (implement these based on your game logic)\n    function calculateProtectionScore(uint256[5] memory lineup) internal pure returns (uint256) {\n        // Implement your protection score calculation logic\n        return 50; // Placeholder\n    }\n\n    function isLastPlayer(uint256 gameId) internal view returns (bool) {\n        // Implement logic to check if this is the last non-rugged player\n        return true; // Placeholder\n    }\n}\n"
      }
    },
    "settings": {
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "userdoc",
            "evm.bytecode.object",
            "evm.deployedBytecode.object"
          ]
        }
      }
    }
  },
  "solcOutput": {
    "contracts": {
      "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol": {
        "IRandomSource": {
          "abi": [
            {
              "inputs": [],
              "name": "randomBytes",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "RuggedGame": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_randomSource",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "randomness",
                  "type": "bytes32"
                }
              ],
              "name": "DisasterTriggered",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "player",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                }
              ],
              "name": "LineupCommitted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "player",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                }
              ],
              "name": "LineupRevealed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "player",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                }
              ],
              "name": "Registered",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "winner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "WinningsClaimed",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "BLOCKS_PER_PHASE",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "REGISTRATION_FEE",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                }
              ],
              "name": "claimWinnings",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "commitment",
                  "type": "bytes32"
                }
              ],
              "name": "commitLineup",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "currentGameId",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "games",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "startBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "prizePool",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "disasterRandomness",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "disasterTriggered",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "player",
                  "type": "address"
                }
              ],
              "name": "isRugged",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "nextGame",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "randomSource",
              "outputs": [
                {
                  "internalType": "contract IRandomSource",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                }
              ],
              "name": "register",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[5]",
                  "name": "lineup",
                  "type": "uint256[5]"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "revealLineup",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                }
              ],
              "name": "status",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "gameId",
                  "type": "uint256"
                }
              ],
              "name": "triggerDisaster",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "errorCode": "5667",
        "formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> /Users/williamcory/playground/src/contracts/RuggedGame.s.sol:131:39:\n    |\n131 |     function calculateProtectionScore(uint256[5] memory lineup) internal pure returns (uint256) {\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
        "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
        "severity": "warning",
        "sourceLocation": {
          "end": 5528,
          "file": "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol",
          "start": 5504
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "errorCode": "5667",
        "formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> /Users/williamcory/playground/src/contracts/RuggedGame.s.sol:136:27:\n    |\n136 |     function isLastPlayer(uint256 gameId) internal view returns (bool) {\n    |                           ^^^^^^^^^^^^^^\n\n",
        "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
        "severity": "warning",
        "sourceLocation": {
          "end": 5706,
          "file": "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol",
          "start": 5692
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "errorCode": "2018",
        "formattedMessage": "Warning: Function state mutability can be restricted to pure\n   --> /Users/williamcory/playground/src/contracts/RuggedGame.s.sol:136:5:\n    |\n136 |     function isLastPlayer(uint256 gameId) internal view returns (bool) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
        "message": "Function state mutability can be restricted to pure",
        "severity": "warning",
        "sourceLocation": {
          "end": 5854,
          "file": "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol",
          "start": 5670
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol": {
        "id": 0
      }
    }
  },
  "artifacts": {
    "IRandomSource": {
      "contractName": "IRandomSource",
      "abi": [
        {
          "inputs": [],
          "name": "randomBytes",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "object": ""
        },
        "deployedBytecode": {
          "object": ""
        }
      }
    },
    "RuggedGame": {
      "contractName": "RuggedGame",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_randomSource",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "randomness",
              "type": "bytes32"
            }
          ],
          "name": "DisasterTriggered",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "name": "LineupCommitted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "name": "LineupRevealed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "name": "Registered",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "WinningsClaimed",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "BLOCKS_PER_PHASE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "REGISTRATION_FEE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "name": "claimWinnings",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "commitment",
              "type": "bytes32"
            }
          ],
          "name": "commitLineup",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentGameId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "games",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prizePool",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "disasterRandomness",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "disasterTriggered",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "claimant",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            }
          ],
          "name": "isRugged",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "nextGame",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "randomSource",
          "outputs": [
            {
              "internalType": "contract IRandomSource",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "name": "register",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[5]",
              "name": "lineup",
              "type": "uint256[5]"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            }
          ],
          "name": "revealLineup",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "name": "status",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            }
          ],
          "name": "triggerDisaster",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "object": "608060405234801561000f575f80fd5b5060405161225838038061225883398181016040528101906100319190610127565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018081905550435f8060015481526020019081526020015f205f01819055506005606461009f9190610188565b436100aa91906101c9565b5f8060015481526020019081526020015f2060010181905550506101fc565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100f6826100cd565b9050919050565b610106816100ec565b8114610110575f80fd5b50565b5f81519050610121816100fd565b92915050565b5f6020828403121561013c5761013b6100c9565b5b5f61014984828501610113565b91505092915050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61019282610152565b915061019d83610152565b92508282026101ab81610152565b915082820484148315176101c2576101c161015b565b5b5092915050565b5f6101d382610152565b91506101de83610152565b92508282019050808211156101f6576101f561015b565b5b92915050565b61204f806102095f395ff3fe6080604052600436106100c1575f3560e01c806342d21ef71161007e57806364b4f7511161005857806364b4f75114610276578063677bd9ff146102a057806393bab443146102c8578063f207564e146102f0576100c1565b806342d21ef7146101e85780635130eb1d14610224578063536a3ddc1461024c576100c1565b806303574fe2146100c55780630bfb99cf146100ed5780630c89b76614610129578063117a5b9014610153578063281d62c4146101945780632e5ab94f146101be575b5f80fd5b3480156100d0575f80fd5b506100eb60048036038101906100e691906114af565b61030c565b005b3480156100f8575f80fd5b50610113600480360381019061010e9190611559565b610595565b60405161012091906115b1565b60405180910390f35b348015610134575f80fd5b5061013d610707565b60405161014a9190611625565b60405180910390f35b34801561015e575f80fd5b506101796004803603810190610174919061163e565b61072c565b60405161018b96959493929190611696565b60405180910390f35b34801561019f575f80fd5b506101a861078f565b6040516101b591906116f5565b60405180910390f35b3480156101c9575f80fd5b506101d2610798565b6040516101df91906116f5565b60405180910390f35b3480156101f3575f80fd5b5061020e6004803603810190610209919061163e565b61079d565b60405161021b919061176e565b60405180910390f35b34801561022f575f80fd5b5061024a6004803603810190610245919061178e565b610972565b005b348015610257575f80fd5b50610260610b37565b60405161026d91906116f5565b60405180910390f35b348015610281575f80fd5b5061028a610b3d565b60405161029791906116f5565b60405180910390f35b3480156102ab575f80fd5b506102c660048036038101906102c1919061163e565b610b48565b005b3480156102d3575f80fd5b506102ee60048036038101906102e9919061163e565b610e45565b005b61030a6004803603810190610305919061163e565b611045565b005b7f6698cf760c4db3f0dfcbc9a737bf65829c18ee4fe76738ebf6fb7d2946e5d8c96103368461079d565b6040516020016103469190611806565b604051602081830303815290604052805190602001201461039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390611866565b60405180910390fd5b5f808481526020019081526020015f206003015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d906118ce565b60405180910390fd5b5f808481526020019081526020015f206004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205482826040516020016104989291906119b1565b60405160208183030381529060405280519060200120146104ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e590611a26565b60405180910390fd5b815f808581526020019081526020015f206005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090600561054b9291906112a3565b50823373ffffffffffffffffffffffffffffffffffffffff167f3c0d6639f9949222a15c302bb9085ee15a08a317a68a264c00d71cacd5e2bfa260405160405180910390a3505050565b5f805f808581526020019081526020015f209050806007015f9054906101000a900460ff166105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f090611a8e565b60405180910390fd5b5f816005015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6005811061064b5761064a611aac565b5b01540361065c576001915050610701565b5f6106e0826005015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206005806020026040519081016040528092919082600580156106d6576020028201915b8154815260200190600101908083116106c2575b505050505061128f565b90505f606483600601545f1c6106f69190611b06565b905081811193505050505b92915050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f602052805f5260405f205f91509050805f015490806001015490806002015490806006015490806007015f9054906101000a900460ff16908060070160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b5f600154905090565b606481565b60605f805f8481526020019081526020015f2090505f6064825f0154436107c49190611b63565b6107ce9190611b96565b90505f8103610816576040518060400160405280601181526020017f524547495354524154494f4e5f4f50454e0000000000000000000000000000008152509250505061096d565b6001810361085d576040518060400160405280600d81526020017f434f4d4d49545f4c494e455550000000000000000000000000000000000000008152509250505061096d565b600281036108a4576040518060400160405280600d81526020017f52455645414c5f4c494e455550000000000000000000000000000000000000008152509250505061096d565b600381036108eb576040518060400160405280601081526020017f545249474745525f4449534153544552000000000000000000000000000000008152509250505061096d565b60048103610932576040518060400160405280600e81526020017f434c41494d5f57494e4e494e47530000000000000000000000000000000000008152509250505061096d565b6040518060400160405280600981526020017f47414d455f4f5645520000000000000000000000000000000000000000000000815250925050505b919050565b7f7dc8c624f7d924ff2f44eb2b26feb86616e485d16e928c8cf9adf541eb3dc49c61099c8361079d565b6040516020016109ac9190611806565b6040516020818303038152906040528051906020012014610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611c10565b60405180910390fd5b5f808381526020019081526020015f206003015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610a9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a93906118ce565b60405180910390fd5b805f808481526020019081526020015f206004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550813373ffffffffffffffffffffffffffffffffffffffff167fb0e5e8f111e2828e0513e1233e519604046add4ec5a2e7be09affe8ec4c869c960405160405180910390a35050565b60015481565b66470de4df82000081565b7fcf90fed3f6b9fae2284120b58faf903d73b67ab10cf07d58aea250980812e812610b728261079d565b604051602001610b829190611806565b6040516020818303038152906040528051906020012014610bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcf90611c78565b60405180910390fd5b5f808281526020019081526020015f206003015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c69906118ce565b60405180910390fd5b610c7c8133610595565b15610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390611ce0565b60405180910390fd5b335f808381526020019081526020015f2060070160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d1781611299565b15610e42575f805f8381526020019081526020015f206002015490505f805f8481526020019081526020015f20600201819055503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610d8e573d5f803e3d5ffd5b50813373ffffffffffffffffffffffffffffffffffffffff167f7472e24de4628e34b41a2aa1688ed4b46a9145b2de1cf93d74902473ccc1740d83604051610dd691906116f5565b60405180910390a360015f815480929190610df090611cfe565b9190505550435f8060015481526020019081526020015f205f018190555060056064610e1c9190611d45565b43610e279190611d86565b5f8060015481526020019081526020015f2060010181905550505b50565b7fa7fc899fd04b6008e90412d497ef755cfd620d1012931e5951e279fab6b6df3e610e6f8261079d565b604051602001610e7f9190611806565b6040516020818303038152906040528051906020012014610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90611e03565b60405180910390fd5b5f808281526020019081526020015f206007015f9054906101000a900460ff1615610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c90611e6b565b60405180910390fd5b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375384f4d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc49190611e9d565b9050805f808481526020019081526020015f206006018190555060015f808481526020019081526020015f206007015f6101000a81548160ff021916908315150217905550817f6f95e2d771f7c88463adaf83e04dc13deebe7419b4853e45910c73323e35fbf1826040516110399190611ec8565b60405180910390a25050565b66470de4df820000341461108e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108590611f2b565b60405180910390fd5b7fe532bbde1d53f06745adc6e15cc863807aeb371378e5703751d04aeaf95644a86110b88261079d565b6040516020016110c89190611806565b604051602081830303815290604052805190602001201461111e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111590611f93565b60405180910390fd5b5f808281526020019081526020015f206003015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b090611ffb565b60405180910390fd5b60015f808381526020019081526020015f206003015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550345f808381526020019081526020015f206002015f8282546112419190611d86565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167f6f3bf3fa84e4763a43b3d23f9d79be242d6d5c834941ff4c1111b67469e1150c60405160405180910390a350565b5f60329050919050565b5f60019050919050565b82600581019282156112d2579160200282015b828111156112d15782518255916020019190600101906112b6565b5b5090506112df91906112e3565b5090565b5b808211156112fa575f815f9055506001016112e4565b5090565b5f604051905090565b5f80fd5b5f819050919050565b61131d8161130b565b8114611327575f80fd5b50565b5f8135905061133881611314565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61138882611342565b810181811067ffffffffffffffff821117156113a7576113a6611352565b5b80604052505050565b5f6113b96112fe565b90506113c5828261137f565b919050565b5f67ffffffffffffffff8211156113e4576113e3611352565b5b602082029050919050565b5f80fd5b5f611405611400846113ca565b6113b0565b9050806020840283018581111561141f5761141e6113ef565b5b835b818110156114485780611434888261132a565b845260208401935050602081019050611421565b5050509392505050565b5f82601f8301126114665761146561133e565b5b60056114738482856113f3565b91505092915050565b5f819050919050565b61148e8161147c565b8114611498575f80fd5b50565b5f813590506114a981611485565b92915050565b5f805f60e084860312156114c6576114c5611307565b5b5f6114d38682870161132a565b93505060206114e486828701611452565b92505060c06114f58682870161149b565b9150509250925092565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611528826114ff565b9050919050565b6115388161151e565b8114611542575f80fd5b50565b5f813590506115538161152f565b92915050565b5f806040838503121561156f5761156e611307565b5b5f61157c8582860161132a565b925050602061158d85828601611545565b9150509250929050565b5f8115159050919050565b6115ab81611597565b82525050565b5f6020820190506115c45f8301846115a2565b92915050565b5f819050919050565b5f6115ed6115e86115e3846114ff565b6115ca565b6114ff565b9050919050565b5f6115fe826115d3565b9050919050565b5f61160f826115f4565b9050919050565b61161f81611605565b82525050565b5f6020820190506116385f830184611616565b92915050565b5f6020828403121561165357611652611307565b5b5f6116608482850161132a565b91505092915050565b6116728161130b565b82525050565b6116818161147c565b82525050565b6116908161151e565b82525050565b5f60c0820190506116a95f830189611669565b6116b66020830188611669565b6116c36040830187611669565b6116d06060830186611678565b6116dd60808301856115a2565b6116ea60a0830184611687565b979650505050505050565b5f6020820190506117085f830184611669565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6117408261170e565b61174a8185611718565b935061175a818560208601611728565b61176381611342565b840191505092915050565b5f6020820190508181035f8301526117868184611736565b905092915050565b5f80604083850312156117a4576117a3611307565b5b5f6117b18582860161132a565b92505060206117c28582860161149b565b9150509250929050565b5f81905092915050565b5f6117e08261170e565b6117ea81856117cc565b93506117fa818560208601611728565b80840191505092915050565b5f61181182846117d6565b915081905092915050565b7f4e6f7420696e2072657665616c207068617365000000000000000000000000005f82015250565b5f611850601383611718565b915061185b8261181c565b602082019050919050565b5f6020820190508181035f83015261187d81611844565b9050919050565b7f4e6f7420726567697374657265640000000000000000000000000000000000005f82015250565b5f6118b8600e83611718565b91506118c382611884565b602082019050919050565b5f6020820190508181035f8301526118e5816118ac565b9050919050565b5f60059050919050565b5f81905092915050565b5f819050919050565b6119128161130b565b82525050565b5f6119238383611909565b60208301905092915050565b5f602082019050919050565b611944816118ec565b61194e81846118f6565b925061195982611900565b805f5b838110156119895781516119708782611918565b965061197b8361192f565b92505060018101905061195c565b505050505050565b5f819050919050565b6119ab6119a68261147c565b611991565b82525050565b5f6119bc828561193b565b60a0820191506119cc828461199a565b6020820191508190509392505050565b7f496e76616c69642072657665616c0000000000000000000000000000000000005f82015250565b5f611a10600e83611718565b9150611a1b826119dc565b602082019050919050565b5f6020820190508181035f830152611a3d81611a04565b9050919050565b7f4469736173746572206e6f7420796574207472696767657265640000000000005f82015250565b5f611a78601a83611718565b9150611a8382611a44565b602082019050919050565b5f6020820190508181035f830152611aa581611a6c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611b108261130b565b9150611b1b8361130b565b925082611b2b57611b2a611ad9565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611b6d8261130b565b9150611b788361130b565b9250828203905081811115611b9057611b8f611b36565b5b92915050565b5f611ba08261130b565b9150611bab8361130b565b925082611bbb57611bba611ad9565b5b828204905092915050565b7f4e6f7420696e20636f6d6d6974207068617365000000000000000000000000005f82015250565b5f611bfa601383611718565b9150611c0582611bc6565b602082019050919050565b5f6020820190508181035f830152611c2781611bee565b9050919050565b7f4e6f7420696e20636c61696d2077696e6e696e677320706861736500000000005f82015250565b5f611c62601b83611718565b9150611c6d82611c2e565b602082019050919050565b5f6020820190508181035f830152611c8f81611c56565b9050919050565b7f506c6179657220697320727567676564000000000000000000000000000000005f82015250565b5f611cca601083611718565b9150611cd582611c96565b602082019050919050565b5f6020820190508181035f830152611cf781611cbe565b9050919050565b5f611d088261130b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d3a57611d39611b36565b5b600182019050919050565b5f611d4f8261130b565b9150611d5a8361130b565b9250828202611d688161130b565b91508282048414831517611d7f57611d7e611b36565b5b5092915050565b5f611d908261130b565b9150611d9b8361130b565b9250828201905080821115611db357611db2611b36565b5b92915050565b7f4e6f7420696e20747269676765722064697361737465722070686173650000005f82015250565b5f611ded601d83611718565b9150611df882611db9565b602082019050919050565b5f6020820190508181035f830152611e1a81611de1565b9050919050565b7f446973617374657220616c7265616479207472696767657265640000000000005f82015250565b5f611e55601a83611718565b9150611e6082611e21565b602082019050919050565b5f6020820190508181035f830152611e8281611e49565b9050919050565b5f81519050611e9781611485565b92915050565b5f60208284031215611eb257611eb1611307565b5b5f611ebf84828501611e89565b91505092915050565b5f602082019050611edb5f830184611678565b92915050565b7f496e636f727265637420726567697374726174696f6e206665650000000000005f82015250565b5f611f15601a83611718565b9150611f2082611ee1565b602082019050919050565b5f6020820190508181035f830152611f4281611f09565b9050919050565b7f526567697374726174696f6e206973206e6f74206f70656e00000000000000005f82015250565b5f611f7d601883611718565b9150611f8882611f49565b602082019050919050565b5f6020820190508181035f830152611faa81611f71565b9050919050565b7f416c7265616479207265676973746572656400000000000000000000000000005f82015250565b5f611fe5601283611718565b9150611ff082611fb1565b602082019050919050565b5f6020820190508181035f83015261201281611fd9565b905091905056fea264697066735822122016dfacc16bb2d898425ac47dade2ae22dd264d3c475194f7dc61f9c8adb78dd464736f6c634300081a0033"
        },
        "deployedBytecode": {
          "object": ""
        }
      }
    }
  },
  "modules": {
    "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol": {
      "id": "/Users/williamcory/playground/src/contracts/RuggedGame.s.sol",
      "rawCode": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRandomSource {\n    function randomBytes() external view returns (bytes32);\n}\n\ncontract RuggedGame {\n    struct Game {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 prizePool;\n        mapping(address => bool) registered;\n        mapping(address => bytes32) commitments;\n        mapping(address => uint256[5]) revealedLineups;\n        bytes32 disasterRandomness;\n        bool disasterTriggered;\n        address claimant;\n    }\n\n    mapping(uint256 => Game) public games;\n    uint256 public currentGameId;\n    uint256 public constant REGISTRATION_FEE = 0.02 ether;\n    uint256 public constant BLOCKS_PER_PHASE = 100; // Adjust as needed\n    IRandomSource public randomSource;\n\n    event Registered(address indexed player, uint256 indexed gameId);\n    event LineupCommitted(address indexed player, uint256 indexed gameId);\n    event LineupRevealed(address indexed player, uint256 indexed gameId);\n    event DisasterTriggered(uint256 indexed gameId, bytes32 randomness);\n    event WinningsClaimed(address indexed winner, uint256 indexed gameId, uint256 amount);\n\n    constructor(address _randomSource) {\n        randomSource = IRandomSource(_randomSource);\n        currentGameId = 1;\n        games[currentGameId].startBlock = block.number;\n        games[currentGameId].endBlock = block.number + BLOCKS_PER_PHASE * 5; // 5 phases\n    }\n\n    function register(uint256 gameId) external payable {\n        require(msg.value == REGISTRATION_FEE, \"Incorrect registration fee\");\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"REGISTRATION_OPEN\"), \"Registration is not open\");\n        require(!games[gameId].registered[msg.sender], \"Already registered\");\n\n        games[gameId].registered[msg.sender] = true;\n        games[gameId].prizePool += msg.value;\n\n        emit Registered(msg.sender, gameId);\n    }\n\n    function nextGame() external view returns (uint256) {\n        return currentGameId;\n    }\n\n    function status(uint256 gameId) public view returns (string memory) {\n        Game storage game = games[gameId];\n        uint256 phase = (block.number - game.startBlock) / BLOCKS_PER_PHASE;\n\n        if (phase == 0) return \"REGISTRATION_OPEN\";\n        if (phase == 1) return \"COMMIT_LINEUP\";\n        if (phase == 2) return \"REVEAL_LINEUP\";\n        if (phase == 3) return \"TRIGGER_DISASTER\";\n        if (phase == 4) return \"CLAIM_WINNINGS\";\n        return \"GAME_OVER\";\n    }\n\n    function commitLineup(uint256 gameId, bytes32 commitment) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"COMMIT_LINEUP\"), \"Not in commit phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n\n        games[gameId].commitments[msg.sender] = commitment;\n        emit LineupCommitted(msg.sender, gameId);\n    }\n\n    function revealLineup(uint256 gameId, uint256[5] memory lineup, bytes32 salt) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"REVEAL_LINEUP\"), \"Not in reveal phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n        require(keccak256(abi.encodePacked(lineup, salt)) == games[gameId].commitments[msg.sender], \"Invalid reveal\");\n\n        games[gameId].revealedLineups[msg.sender] = lineup;\n        emit LineupRevealed(msg.sender, gameId);\n    }\n\n    function triggerDisaster(uint256 gameId) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"TRIGGER_DISASTER\"), \"Not in trigger disaster phase\");\n        require(!games[gameId].disasterTriggered, \"Disaster already triggered\");\n\n        bytes32 randomness = randomSource.randomBytes();\n        games[gameId].disasterRandomness = randomness;\n        games[gameId].disasterTriggered = true;\n\n        emit DisasterTriggered(gameId, randomness);\n    }\n\n    function isRugged(uint256 gameId, address player) public view returns (bool) {\n        Game storage game = games[gameId];\n        require(game.disasterTriggered, \"Disaster not yet triggered\");\n\n        // Check for invalid lineup (simplified, add more checks as needed)\n        if (game.revealedLineups[player][0] == 0) return true;\n\n        // Simplified disaster check (implement your logic here)\n        uint256 protectionScore = calculateProtectionScore(game.revealedLineups[player]);\n        uint256 disasterSeverity = uint256(game.disasterRandomness) % 100;\n\n        return disasterSeverity > protectionScore;\n    }\n\n    function claimWinnings(uint256 gameId) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"CLAIM_WINNINGS\"), \"Not in claim winnings phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n        require(!isRugged(gameId, msg.sender), \"Player is rugged\");\n\n        games[gameId].claimant = msg.sender;\n\n        // If this is the last player, transfer winnings\n        if (isLastPlayer(gameId)) {\n            uint256 winnings = games[gameId].prizePool;\n            games[gameId].prizePool = 0;\n            payable(msg.sender).transfer(winnings);\n            emit WinningsClaimed(msg.sender, gameId, winnings);\n            \n            // Start next game\n            currentGameId++;\n            games[currentGameId].startBlock = block.number;\n            games[currentGameId].endBlock = block.number + BLOCKS_PER_PHASE * 5;\n        }\n    }\n\n    // Helper functions (implement these based on your game logic)\n    function calculateProtectionScore(uint256[5] memory lineup) internal pure returns (uint256) {\n        // Implement your protection score calculation logic\n        return 50; // Placeholder\n    }\n\n    function isLastPlayer(uint256 gameId) internal view returns (bool) {\n        // Implement logic to check if this is the last non-rugged player\n        return true; // Placeholder\n    }\n}\n",
      "importedIds": [],
      "code": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IRandomSource {\n    function randomBytes() external view returns (bytes32);\n}\n\ncontract RuggedGame {\n    struct Game {\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 prizePool;\n        mapping(address => bool) registered;\n        mapping(address => bytes32) commitments;\n        mapping(address => uint256[5]) revealedLineups;\n        bytes32 disasterRandomness;\n        bool disasterTriggered;\n        address claimant;\n    }\n\n    mapping(uint256 => Game) public games;\n    uint256 public currentGameId;\n    uint256 public constant REGISTRATION_FEE = 0.02 ether;\n    uint256 public constant BLOCKS_PER_PHASE = 100; // Adjust as needed\n    IRandomSource public randomSource;\n\n    event Registered(address indexed player, uint256 indexed gameId);\n    event LineupCommitted(address indexed player, uint256 indexed gameId);\n    event LineupRevealed(address indexed player, uint256 indexed gameId);\n    event DisasterTriggered(uint256 indexed gameId, bytes32 randomness);\n    event WinningsClaimed(address indexed winner, uint256 indexed gameId, uint256 amount);\n\n    constructor(address _randomSource) {\n        randomSource = IRandomSource(_randomSource);\n        currentGameId = 1;\n        games[currentGameId].startBlock = block.number;\n        games[currentGameId].endBlock = block.number + BLOCKS_PER_PHASE * 5; // 5 phases\n    }\n\n    function register(uint256 gameId) external payable {\n        require(msg.value == REGISTRATION_FEE, \"Incorrect registration fee\");\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"REGISTRATION_OPEN\"), \"Registration is not open\");\n        require(!games[gameId].registered[msg.sender], \"Already registered\");\n\n        games[gameId].registered[msg.sender] = true;\n        games[gameId].prizePool += msg.value;\n\n        emit Registered(msg.sender, gameId);\n    }\n\n    function nextGame() external view returns (uint256) {\n        return currentGameId;\n    }\n\n    function status(uint256 gameId) public view returns (string memory) {\n        Game storage game = games[gameId];\n        uint256 phase = (block.number - game.startBlock) / BLOCKS_PER_PHASE;\n\n        if (phase == 0) return \"REGISTRATION_OPEN\";\n        if (phase == 1) return \"COMMIT_LINEUP\";\n        if (phase == 2) return \"REVEAL_LINEUP\";\n        if (phase == 3) return \"TRIGGER_DISASTER\";\n        if (phase == 4) return \"CLAIM_WINNINGS\";\n        return \"GAME_OVER\";\n    }\n\n    function commitLineup(uint256 gameId, bytes32 commitment) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"COMMIT_LINEUP\"), \"Not in commit phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n\n        games[gameId].commitments[msg.sender] = commitment;\n        emit LineupCommitted(msg.sender, gameId);\n    }\n\n    function revealLineup(uint256 gameId, uint256[5] memory lineup, bytes32 salt) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"REVEAL_LINEUP\"), \"Not in reveal phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n        require(keccak256(abi.encodePacked(lineup, salt)) == games[gameId].commitments[msg.sender], \"Invalid reveal\");\n\n        games[gameId].revealedLineups[msg.sender] = lineup;\n        emit LineupRevealed(msg.sender, gameId);\n    }\n\n    function triggerDisaster(uint256 gameId) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"TRIGGER_DISASTER\"), \"Not in trigger disaster phase\");\n        require(!games[gameId].disasterTriggered, \"Disaster already triggered\");\n\n        bytes32 randomness = randomSource.randomBytes();\n        games[gameId].disasterRandomness = randomness;\n        games[gameId].disasterTriggered = true;\n\n        emit DisasterTriggered(gameId, randomness);\n    }\n\n    function isRugged(uint256 gameId, address player) public view returns (bool) {\n        Game storage game = games[gameId];\n        require(game.disasterTriggered, \"Disaster not yet triggered\");\n\n        // Check for invalid lineup (simplified, add more checks as needed)\n        if (game.revealedLineups[player][0] == 0) return true;\n\n        // Simplified disaster check (implement your logic here)\n        uint256 protectionScore = calculateProtectionScore(game.revealedLineups[player]);\n        uint256 disasterSeverity = uint256(game.disasterRandomness) % 100;\n\n        return disasterSeverity > protectionScore;\n    }\n\n    function claimWinnings(uint256 gameId) external {\n        require(keccak256(abi.encodePacked(status(gameId))) == keccak256(\"CLAIM_WINNINGS\"), \"Not in claim winnings phase\");\n        require(games[gameId].registered[msg.sender], \"Not registered\");\n        require(!isRugged(gameId, msg.sender), \"Player is rugged\");\n\n        games[gameId].claimant = msg.sender;\n\n        // If this is the last player, transfer winnings\n        if (isLastPlayer(gameId)) {\n            uint256 winnings = games[gameId].prizePool;\n            games[gameId].prizePool = 0;\n            payable(msg.sender).transfer(winnings);\n            emit WinningsClaimed(msg.sender, gameId, winnings);\n            \n            // Start next game\n            currentGameId++;\n            games[currentGameId].startBlock = block.number;\n            games[currentGameId].endBlock = block.number + BLOCKS_PER_PHASE * 5;\n        }\n    }\n\n    // Helper functions (implement these based on your game logic)\n    function calculateProtectionScore(uint256[5] memory lineup) internal pure returns (uint256) {\n        // Implement your protection score calculation logic\n        return 50; // Placeholder\n    }\n\n    function isLastPlayer(uint256 gameId) internal view returns (bool) {\n        // Implement logic to check if this is the last non-rugged player\n        return true; // Placeholder\n    }\n}\n"
    }
  }
}